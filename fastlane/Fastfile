fastlane_version "2.75.0"

default_platform :ios

platform :ios do
  # Run this before doing anything else
  # before_all do

  #   # If the GIT status is not clean, abort. We won't want to include junk in the build
  #   ensure_git_status_clean

  # end

  ######################### PUBLIC LANES ##########################
  desc "Build School Loop Beta"
  lane :beta do
    do_build(
      app_id: "com.schoolloop.mobileloop.beta",
      app_name: "School Loop Beta",
      type: "adhoc",
      release_path: "release/beta",
      project_name:"MobileLoop",
      configuration:"Release",
      scheme:"MobileLoop"
    )
  end

  desc "Build School Loop"
  lane :app do
    do_build(
      app_identifier: "com.schoolloop.mobileloop.app",
      app_name: "School Loop",
      type: "appstore",
      release_path: "release/app",
      project_name:"MobileLoop",
      configuration:"Release",
      scheme:"MobileLoop"
    )
  end

  desc "Build Mirror Loop"
  lane :mirror do
    do_build(
      app_identifier: "com.schoolloop.mobileloop.mirror",
      app_name: "Mirror Loop",
      type: "adhoc",
      release_path: "release/mirror",
      project_name:"MobileLoop",
      configuration:"Release",
      scheme:"MobileLoop"
    )
  end

  desc "Build Dev Loop"
  lane :dev do
    do_build(
      app_identifier: "com.schoolloop.mobileloop.dev",
      app_name: "Dev Loop",
      type: "adhoc",
      release_path: "release/dev",
      project_name:"MobileLoop",
      configuration:"Release",
      scheme:"MobileLoop"
    )
  end

  ######################### PRIVATE LANES #########################
  private_lane :do_build do |options|
    produce(app_identifier: options[:app_identifier], app_name: options[:app_name])
    match(app_identifier: options[:app_identifier], type: options[:type], force: true, clone_branch_directly: true)
    pem(app_identifier: options[:app_identifier], output_path: options[:release_path], p12_password: "loops411")

    # Build the app
    gym(
      scheme: "#{options[:scheme]}",
      configuration: options[:configuration],
      output_directory: "tmp",
      clean: true
    )

  end

  # After all the steps have completed succesfully, run this.
  after_all do |lane|

    # # Remove all build artifacts, but keep mobileprovisioning profiles since they are stored in GIT
    # clean_build_artifacts(
    #   exclude_pattern: ".*\.mobileprovision"
    # )

    # # Reset all changes to the git checkout
    # reset_git_repo(
    #   force: true
    # )

  end

  # If there was an error, run this
  error do |lane, exception|

    # # Remove all build artifacts, but keep mobileprovisioning profiles since they are stored in GIT
    # clean_build_artifacts(
    #   exclude_pattern: ".*\.mobileprovision"
    # )

    # # Reset all changes to the git checkout
    # reset_git_repo(
    #   force: true
    # )

  end
end
